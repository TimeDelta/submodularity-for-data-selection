#!/bin/bash
set -e

# constants
SCRIPT_DIR="`dirname "$(readlink -f "$0")"`"
TRUNK="`readlink -f "$SCRIPT_DIR/../.."`"

# python "$SCRIPT_DIR"/clean_text.py <(< "$1" "$SCRIPT_DIR"/normalize-punctuation.perl -q | "$SCRIPT_DIR"/tokenizer.perl -q)

usage (){
	echo "Usage: `basename "$0"` [options] <corpus> [<output_file>]"
	echo "Options:"
	echo "  -j <jobs>"
	echo "      Split corpus into <jobs> chunks and clean all of them in parallel"
	echo "      distributed across the cluster."
	echo "  -b <build_dir>"
	echo "      Specify the location of the build directory."
	echo "      [Default: $build_dir]"
	echo "  -z <directory>"
	echo "      Create all intermediate files in <directory>."
	echo "Arguments:"
	echo "  <corpus>"
	echo "      The corpus to clean."
	echo "  [<output_file>]"
	echo "      Optionally override the name & location of the output file."
	echo "      [Default: <corpus-\".corpus\">_clean.corpus]"
}

# default options
jobs=1
build_dir="$TRUNK/build"
working_dir=.

[[ $1 == "--help" ]] && { usage; exit 0; }

# parse options
while getopts ":hj:b:z:" opt; do
	case $opt in
		h) usage; exit 0 ;;
		j) jobs="$OPTARG" ;;
		b) build_dir="`readlink -f "$OPTARG"`" ;;
		z) working_dir="`readlink -f "$OPTARG"`" ;;
		\?)
			echo "Invalid Option: -$OPTARG" >&2
			usage >&2; exit 1 ;;
		:)
			echo "Option -$OPTARG requires an additional argument" >&2
			usage >&2; exit 1 ;;
	esac
done

shift $(($OPTIND-1))

# make sure the correct number of operands were given
if [[ $# -lt 1 ]]; then
	echo "Error: Missing at least one positional argument" >&2
	usage >&2
	exit 65
fi

corpus="`readlink -f "$1"`"
[[ $# -gt 1 ]] && output_file="`readlink -f "$2"`" || output_file="${corpus%.corpus}_clean.corpus"

if [[ $jobs -gt 1 ]]; then
	prefix="$working_dir/`basename "${corpus%.corpus}"`"
	"$SCRIPT_DIR"/psplit -nc $jobs -p "$prefix" "$corpus"
	corpus_chunks="$prefix.chunk1"
	for ((i=2; i<=$jobs; i++)); do
		corpus_chunks="$corpus_chunks $prefix.chunk$i"
	done
	make BUILD_DIR="$build_dir" SCRIPTS_DIR="$SCRIPT_DIR" CORPUS_FILES="$corpus_chunks" OUTPUT="$output_file" -sj $jobs -f "$SCRIPT_DIR/preprocess.make" combined
else
	< "$corpus" "$SCRIPT_DIR"/normalize-punctuation.perl -q | "$SCRIPT_DIR"/tokenizer.perl -q | "$SCRIPT_DIR"/clean_text.py > "$output_file"
fi
