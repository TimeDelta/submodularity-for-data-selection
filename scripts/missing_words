#!/bin/bash
set -e

pgrams () {
    local arpa_file="$1";
    shift;
    while [[ $# -gt 0 ]]; do
        awk -v pattern="$1-grams" '$0 ~ pattern {s = 1;} $0 !~ pattern {if ($0 ~ /^$/) s=0;} {if (s == 1 && $0 !~ pattern) print $0;}' "$arpa_file";
        shift;
    done
}

# constants
SCRIPTS_DIR="`dirname "$(readlink -f "$0")"`"
TRUNK="$(readlink -f "$SCRIPTS_DIR/../..")"
DICT="$TRUNK/decoder/data/dict"

arpa_or_dict_words (){
	if [[ -n $ARPA ]]; then
		{
			pgrams "$ARPA" 1 | awk '{print $2}'
			pgrams "$ARPA" 2 | awk '{print $2"\n"$3}'
			pgrams "$ARPA" 3 | awk '{print $2"\n"$3"\n"$4}'
		} | sort | uniq
	else
		awk '{print $1}' "$DICT" | sort
	fi
}

if [[ $1 == "--help" || $1 == "-h" ]]; then
	echo "Get information about words that are in a file but are not in either a"
	echo "pronunciation dictionary or an ARPA file."
	echo "Usage: `basename "$0"` [options] <file>"
	echo "Options: (mutually exclusive)"
	echo "  -d <dictionary_file>"
	echo "    Check to make sure all of the words are in this dictionary."
	echo "  -a <arpa_file>"
	echo "    Check to make sure all of the words are in this ARPA file."
	echo "[Default: Use \"$DICT\"]"
	exit 0
fi

ARPA=""
if [[ $1 == "-d" ]]; then
	DICT="$2"
	shift 2
elif [[ $1 == "-a" ]]; then
	ARPA="$2"
	shift 2
fi

comm -23 \
<(< "$1" tr ' \t' '\n\n' | tr 'a-z' 'A-Z' | sort | uniq) \
<(arpa_or_dict_words) | \
{
	total_count=0
	while read -s word; do
		if [[ ! $word =~ \</S\>|\<S\> ]]; then
			count=`egrep -io "\b$word\b" "$1" | wc -l`
			echo "$word $count"
			total_count=$(($total_count+$count))
		fi
	done
	echo Total count of missing words: $total_count >&2
} | sort -grk 2,2
